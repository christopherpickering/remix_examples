{
  "version": 3,
  "sources": ["empty-module:~/ldap.server", "../../../app/routes/login.tsx"],
  "sourcesContent": ["module.exports = {};", "import type { ActionArgs } from \"@remix-run/node\";\nimport { redirect } from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport { Link, useSearchParams } from \"@remix-run/react\";\nimport * as React from \"react\";\nimport type { LoaderArgs } from \"@remix-run/server-runtime\";\n\nimport { verifyLogin } from \"~/ldap.server\";\nimport {\n  getSession,\n  sessionStorage,\n  getUserId,\n  createUserSession,\n} from \"~/session.server\";\nimport { useLoaderData } from \"@remix-run/react\";\n\nimport { Form, useActionData } from \"@remix-run/react\";\nimport { safeRedirect, validateEmail } from \"~/utils\";\n\nexport async function loader({ request }: LoaderArgs) {\n  const userId = await getUserId(request);\n  if (userId) return redirect(\"/\");\n\n  const session = await getSession(request);\n  const loginError = session.get(\"loginError\") || null;\n\n  return json(\n    { loginError },\n    {\n      headers: {\n        // only necessary with cookieSessionStorage\n        \"Set-Cookie\": await sessionStorage.commitSession(session),\n      },\n    }\n  );\n}\n\nexport async function action({ request }: ActionArgs) {\n  const formData = await request.formData();\n  const email = formData.get(\"email\");\n  const password = formData.get(\"password\");\n  const redirectTo = safeRedirect(formData.get(\"redirectTo\"), \"/\");\n\n  let errors = {};\n\n  if (!validateEmail(email)) {\n    errors.email = \"Email is invalid\";\n  }\n  if (typeof password !== \"string\" || password.length === 0) {\n    errors.password = \"Password is required\";\n  }\n\n  if (Object.keys(errors).length) {\n    return json({ errors: errors }, { status: 400 });\n  }\n  const user = await verifyLogin(email, password);\n\n  if (!user) {\n    return json(\n      { errors: { email: \"Invalid email or password\", password: null } },\n      { status: 400 }\n    );\n  }\n\n  return createUserSession({\n    request: request,\n    userId: user.id,\n    expiration: undefined,\n    redirectTo,\n  });\n}\n\nexport const meta: MetaFunction = () => {\n  return {\n    title: \"Login\",\n  };\n};\n\nexport default function Login() {\n  const [searchParams] = useSearchParams();\n  const redirectTo = searchParams.get(\"redirectTo\") || \"/notes\";\n\n  const { loginError } = useLoaderData();\n\n  const actionData = useActionData<typeof action>();\n\n  const emailRef = React.useRef<HTMLInputElement>(null);\n  const passwordRef = React.useRef<HTMLInputElement>(null);\n\n  React.useEffect(() => {\n    if (actionData?.errors?.email) {\n      emailRef.current?.focus();\n    } else if (actionData?.errors?.password) {\n      passwordRef.current?.focus();\n    }\n  }, [actionData]);\n\n  return (\n    <div className=\"hero \">\n      <div className=\"hero-body\">\n        <div className=\"columns is-centered mt-5\">\n          <div className=\"column is-4 mt-5 box\">\n            <Form method=\"post\" className=\"form\">\n              <h1 className=\"title is-1\">Login</h1>\n              {loginError ? (\n                <article className=\"message is-danger \">\n                  <div className=\"message-body p-2 is-flex\">\n                    \n                    <span>{loginError}</span>\n                  </div>\n                </article>\n              ) : null}\n              <div className=\"field\">\n                <label className=\"label\">Email</label>\n                <div className=\"control has-icons-left\">\n                  <input\n                    ref={emailRef}\n                    className=\"input\"\n                    name=\"email\"\n                    autoComplete=\"off\"\n                  />\n                 \n                </div>\n                {actionData?.errors?.email && (\n                  <p className=\"help is-danger\">{actionData.errors.email}</p>\n                )}\n              </div>\n              <div className=\"field\">\n                <label className=\"label\">Password</label>\n                <div className=\"control has-icons-left\">\n                  <input\n                    ref={passwordRef}\n                    className=\"input\"\n                    type=\"password\"\n                    name=\"password\"\n                  />\n                  \n                </div>\n                {actionData?.errors?.password && (\n                  <p className=\"help is-danger\">{actionData.errors.password}</p>\n                )}\n              </div>\n              <button\n                className=\"button is-info is-fullwidth\"\n                type=\"submit\"\n                value=\"Submit\"\n              >\n                Log In\n              </button>\n            </Form>\n            \n            <Link className=\"button is-fullwidth\" to=\"/\">\n              Login with SAML\n            </Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],
  "mappings": "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",
  "names": ["_a", "_b"]
}
