{
  "version": 3,
  "sources": ["<stdin>", "../app/entry.server.tsx", "../app/root.tsx", "../app/session.server.ts", "../app/db.server.ts", "../app/models/user.server.ts", "../app/saml.server.ts", "../app/routes/metadata[.].xml.tsx", "../app/routes/auth/asc.tsx", "../app/routes/auth/slo.tsx", "../app/routes/logout.tsx", "../app/routes/index.tsx", "../app/routes/login.tsx", "../app/ldap.server.tsx", "../app/utils.ts", "server-assets-manifest:@remix-run/dev/assets-manifest", "server-entry-module:@remix-run/dev/server-build"],
  "sourcesContent": ["export * from \"@remix-run/dev/server-build\";", "import { PassThrough } from \"stream\";\n\nimport type { EntryContext } from \"@remix-run/node\";\nimport { Response } from \"@remix-run/node\";\nimport { RemixServer } from \"@remix-run/react\";\nimport isbot from \"isbot\";\nimport { renderToPipeableStream } from \"react-dom/server\";\n\nconst ABORT_DELAY = 5000;\n\nconst handleRequest = (\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) =>\n  isbot(request.headers.get(\"user-agent\"))\n    ? handleBotRequest(\n        request,\n        responseStatusCode,\n        responseHeaders,\n        remixContext\n      )\n    : handleBrowserRequest(\n        request,\n        responseStatusCode,\n        responseHeaders,\n        remixContext\n      );\nexport default handleRequest;\n\nconst handleBotRequest = (\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) =>\n  new Promise((resolve, reject) => {\n    let didError = false;\n\n    const { pipe, abort } = renderToPipeableStream(\n      <RemixServer context={remixContext} url={request.url} />,\n      {\n        onAllReady: () => {\n          const body = new PassThrough();\n\n          responseHeaders.set(\"Content-Type\", \"text/html\");\n\n          resolve(\n            new Response(body, {\n              headers: responseHeaders,\n              status: didError ? 500 : responseStatusCode,\n            })\n          );\n\n          pipe(body);\n        },\n        onShellError: (error: unknown) => {\n          reject(error);\n        },\n        onError: (error: unknown) => {\n          didError = true;\n\n          console.error(error);\n        },\n      }\n    );\n\n    setTimeout(abort, ABORT_DELAY);\n  });\n\nconst handleBrowserRequest = (\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) =>\n  new Promise((resolve, reject) => {\n    let didError = false;\n\n    const { pipe, abort } = renderToPipeableStream(\n      <RemixServer context={remixContext} url={request.url} />,\n      {\n        onShellReady: () => {\n          const body = new PassThrough();\n\n          responseHeaders.set(\"Content-Type\", \"text/html\");\n\n          resolve(\n            new Response(body, {\n              headers: responseHeaders,\n              status: didError ? 500 : responseStatusCode,\n            })\n          );\n\n          pipe(body);\n        },\n        onShellError: (error: unknown) => {\n          reject(error);\n        },\n        onError: (error: unknown) => {\n          didError = true;\n\n          console.error(error);\n        },\n      }\n    );\n\n    setTimeout(abort, ABORT_DELAY);\n  });\n", "import type { MetaFunction } from \"@remix-run/node\";\nimport { useLoaderData } from \"@remix-run/react\";\n\nimport { json } from \"@remix-run/node\";\n\n\nimport { getUser, getSession, sessionStorage } from \"./session.server\";\n\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n} from \"@remix-run/react\";\n\nexport const meta: MetaFunction = () => ({\n  charset: \"utf-8\",\n  title: \"New Remix App\",\n  viewport: \"width=device-width,initial-scale=1\",\n});\n\nexport async function loader({ request }: LoaderArgs) {\n  const session = await getSession(request);\n\n  return json({\n    headers: {\n      // only necessary with cookieSessionStorage\n      \"Set-Cookie\": await sessionStorage.commitSession(session),\n    },\n    user: await getUser(request),\n  });\n}\n\nexport default function App() {\n  const { user } = useLoaderData();\n\n  return (\n    <html lang=\"en\">\n      <head>\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <Outlet />\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>\n  );\n}\n", "import { createCookieSessionStorage, redirect } from \"@remix-run/node\";\nimport invariant from \"tiny-invariant\";\n\nimport type { User } from \"~/models/user.server\";\nimport { getUserById } from \"~/models/user.server\";\nimport { getIdp, sp } from \"~/saml.server\";\n\ninvariant(process.env.SESSION_SECRET, \"SESSION_SECRET must be set\");\n\nexport const sessionStorage = createCookieSessionStorage({\n  cookie: {\n    name: \"__session\",\n    httpOnly: true,\n    path: \"/\",\n    sameSite: \"lax\",\n    secrets: [process.env.SESSION_SECRET],\n    secure: process.env.NODE_ENV === \"production\",\n  },\n});\n\nconst USER_SESSION_KEY = \"userId\";\n\nexport async function getSession(request: Request) {\n  const cookie = request.headers.get(\"Cookie\");\n  return sessionStorage.getSession(cookie);\n}\n\nexport async function getUserId(\n  request: Request\n): Promise<User[\"id\"] | undefined> {\n  const session = await getSession(request);\n  const userId = session.get(USER_SESSION_KEY);\n\n  return userId;\n}\n\nexport async function getUser(request: Request) {\n  const userId = await getUserId(request);\n  if (userId === undefined) return null;\n\n  const user = await getUserById(userId);\n  if (user) return user;\n\n  throw await logout(request);\n}\n\nexport let authorize: Policy<{\n  user: User;\n  session: Session;\n}> = async (request, groups = undefined, callback) => {\n  let session = await getSession(request);\n  const redirectTo: string = new URL(request.url).pathname;\n  let user = await getUser(request);\n  try {\n    // send back to login page if the user doesn't exist.\n    if (!user) {\n      const searchParams = new URLSearchParams([[\"redirectTo\", redirectTo]]);\n      throw redirect(`/?${searchParams}`);\n    }\n\n    // potentially check user for required groups here.\n  } catch {\n    // destroy session and try to login\n    // try again, in case the saml server is broken. Will\n    // redirect to /login to use ldap auth as a fallback.\n    try {\n      const idp = await getIdp();\n      const { id, context } = sp.createLoginRequest(idp, \"redirect\");\n      const url = new URL(request.url);\n      const pathname = url.searchParams.get(\"redirectTo\") || \"/\";\n      return redirect(context + \"&RelayState=\" + pathname, {\n        headers: {\n          \"Set-Cookie\": await sessionStorage.destroySession(session),\n        },\n      });\n    } catch {\n      session.flash(\"loginError\", `Could not authenticate you from SAML.`);\n\n      throw redirect(\"/login\", {\n        headers: {\n          \"Set-Cookie\": await sessionStorage.commitSession(session),\n        },\n      });\n    }\n  }\n  return await callback({ user, session });\n};\n\nexport async function requireUserId(\n  request: Request,\n  redirectTo: string = new URL(request.url).pathname\n) {\n  const userId = await getUserId(request);\n  if (!userId) {\n    const searchParams = new URLSearchParams([[\"redirectTo\", redirectTo]]);\n    throw redirect(`/login?${searchParams}`);\n  }\n  return userId;\n}\n\nexport async function requireUser(request: Request) {\n  const userId = await requireUserId(request);\n\n  const user = await getUserById(userId);\n  if (user) return user;\n\n  throw await logout(request);\n}\n\nexport async function createUserSession({\n  request,\n  userId,\n  expiration,\n  redirectTo,\n}: {\n  request: Request;\n  userId: string;\n  expiration: string;\n  redirectTo: string;\n}) {\n  const expirationDate = expiration\n    ? new Date(expiration)\n    : new Date(new Date().getTime() + 60 * 60 * 24 * 7);\n  const maxAge = expirationDate.getTime() - new Date().getTime();\n  const session = await getSession(request);\n  session.set(USER_SESSION_KEY, userId);\n  return redirect(redirectTo, {\n    headers: {\n      \"Set-Cookie\": await sessionStorage.commitSession(session, {\n        maxAge: maxAge,\n      }),\n    },\n  });\n}\n\nexport async function logout(request: Request) {\n  const session = await getSession(request);\n  return redirect(\"/\", {\n    headers: {\n      \"Set-Cookie\": await sessionStorage.destroySession(session),\n    },\n  });\n}\n", "import { PrismaClient } from \"@prisma/client\";\nimport invariant from \"tiny-invariant\";\n\nlet prisma: PrismaClient;\n\ndeclare global {\n  var __db__: PrismaClient;\n}\n\n// this is needed because in development we don't want to restart\n// the server with every change, but we want to make sure we don't\n// create a new connection to the DB with every change either.\n// in production we'll have a single connection to the DB.\nif (process.env.NODE_ENV === \"production\") {\n  prisma = getClient();\n} else {\n  if (!global.__db__) {\n    global.__db__ = getClient();\n  }\n  prisma = global.__db__;\n}\n\nfunction getClient() {\n  const { DATABASE_URL } = process.env;\n  invariant(typeof DATABASE_URL === \"string\", \"DATABASE_URL env var not set\");\n\n  const databaseUrl = new URL(DATABASE_URL);\n\n  const isLocalHost = databaseUrl.hostname === \"localhost\";\n\n  const PRIMARY_REGION = isLocalHost ? null : process.env.PRIMARY_REGION;\n  const FLY_REGION = isLocalHost ? null : process.env.FLY_REGION;\n\n  const isReadReplicaRegion = !PRIMARY_REGION || PRIMARY_REGION === FLY_REGION;\n\n  if (!isLocalHost) {\n    databaseUrl.host = `${FLY_REGION}.${databaseUrl.host}`;\n    if (!isReadReplicaRegion) {\n      // 5433 is the read-replica port\n      databaseUrl.port = \"5433\";\n    }\n  }\n\n  console.log(`\uD83D\uDD0C setting up prisma client to ${databaseUrl.host}`);\n  // NOTE: during development if you change anything in this function, remember\n  // that this only runs once per server restart and won't automatically be\n  // re-run per request like everything else is. So if you need to change\n  // something in this file, you'll need to manually restart the server.\n  const client = new PrismaClient({\n    datasources: {\n      db: {\n        url: databaseUrl.toString(),\n      },\n    },\n  });\n  // connect eagerly\n  client.$connect();\n\n  return client;\n}\n\nexport { prisma };\n", "import type { Password, User } from \"@prisma/client\";\nimport bcrypt from \"bcryptjs\";\n\nimport { prisma } from \"~/db.server\";\n\nexport type { User, Group } from \"@prisma/client\";\n\nexport async function getUserById(id: User[\"id\"]) {\n  return prisma.user.findUnique({ where: { id }, include: { groups: true } });\n}\n\nexport async function getUserByEmail(email: User[\"email\"]) {\n  return prisma.user.findUnique({ where: { email } });\n}\n\nexport async function createUser(email: User[\"email\"]) {\n  return prisma.user.create({\n    data: {\n      email,\n    },\n  });\n}\n\nexport async function createGroup(name: Group[\"name\"]) {\n  return await prisma.group.create({\n    data: {\n      name,\n    },\n  });\n}\nexport async function getGroupByName(name: Group[\"name\"]) {\n  return await prisma.group.findUnique({ where: { name } });\n}\n\nexport async function getOrCreateGroup(name: Group[\"name\"]) {\n  let group = await getGroupByName(name);\n\n  if (group) return group;\n\n  return await createGroup(name);\n}\n\nexport async function getOrCreateUser(email: User[\"email\"]) {\n  let user = await getUserByEmail(email);\n  if (user) return user;\n\n  return await createUser(email);\n}\n\nexport async function updateUserProps(\n  email: User[\"email\"],\n  firstName: User[\"firstName\"],\n  lastName: User[\"lastName\"],\n  groups: Groups[\"name\"][]\n) {\n  // create group if not existing\n  // let groupDetails = []\n  // let x = await groups.forEach(async (group) => groupDetails.push(await getOrCreateGroup(group)))\n  // // console.log('x', groupDetails)\n  await getOrCreateUser(email);\n\n  groups = await Promise.all(\n    groups.map(async (group) => await getOrCreateGroup(group))\n  );\n\n  const existing_groups = await prisma.user.findUnique({\n    where: { email },\n    select: { groups: { select: { id: true } } },\n  });\n\n  const new_group_ids = groups.map((group) => Number(group.id));\n  const removed_groups = existing_groups.groups\n    .filter((group) => {\n      if (!new_group_ids.includes(group.id)) {\n        return true;\n      }\n    })\n    .map((group) => {\n      return { id: group.id };\n    });\n\n  return await prisma.user.update({\n    where: { email: email },\n    data: {\n      firstName: firstName,\n      lastName: lastName,\n      groups: {\n        connect: groups.map((group) => {\n          return { id: group.id };\n        }),\n        disconnect: removed_groups,\n      },\n    },\n  });\n\n  // console.log(email, firstName, lastName);\n  // console.log(groups);\n}\n\nexport async function deleteUserByEmail(email: User[\"email\"]) {\n  return prisma.user.delete({ where: { email } });\n}\n", "// saml server\nimport * as samlify from \"samlify\";\nimport * as validator from \"@authenio/samlify-xsd-schema-validator\";\nimport fs from \"fs\";\n\nsamlify.setSchemaValidator(validator);\n\nconst spData = {\n  entityID: process.env.HOSTNAME,\n  authnRequestsSigned: process.env.SAML_SP_AUTHNREQUESTSSIGNED,\n  wantAssertionsSigned: process.env.SAML_SP_WANTASSERTIONSIGNED,\n  wantMessageSigned: process.env.SAML_SP_WANTMESSAGESIGNED,\n  wantLogoutResponseSigned: process.env.SAML_SP_WANTLOGOUTREQUESTSIGNED,\n  wantLogoutRequestSigned: process.env.SAML_SP_WANTLOGOUTRESPONSESIGNED,\n  isAssertionEncrypted: process.env.SAML_SP_ISASSERTIONENCRYPTED,\n  assertionConsumerService: [\n    {\n      Binding: \"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\",\n      Location: process.env.HOSTNAME + \"/auth/asc\",\n    },\n    {\n      Binding: \"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\",\n      Location: process.env.HOSTNAME + \"/auth/asc\",\n    },\n  ],\n  singleLogoutService: [\n    {\n      Binding: \"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\",\n      Location: process.env.HOSTNAME + \"/auth/slo\",\n    },\n    {\n      Binding: \"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\",\n      Location: process.env.HOSTNAME + \"/auth/slo\",\n    },\n  ],\n};\nif (process.env.SAML_PRIVATE_KEY)\n  spData.privateKey = fs.readFileSync(process.env.SAML_PRIVATE_KEY);\nif (process.env.SAML_PRIVATE_KEY_PASS)\n  spData.privateKeyPass = process.env.SAML_PRIVATE_KEY_PASS;\nif (process.env.SAML_ENC_PRIVATE_KEY)\n  spData.encPrivateKey = fs.readFileSync(process.env.SAML_ENC_PRIVATE_KEY);\n\nexport const sp = samlify.ServiceProvider(spData);\n\nexport async function getIdp() {\n  // get IDP metadata XML\n  const IpdXmlFetch = await fetch(process.env.SAML_IDP_METADATA);\n  const Idpxml = await IpdXmlFetch.text();\n\n  const idpData = {\n    metadata: Idpxml,\n  };\n\n  if (process.env.SAML_PRIVATE_KEY)\n    idpData.privateKey = fs.readFileSync(process.env.SAML_PRIVATE_KEY);\n\n  return samlify.IdentityProvider(idpData);\n}\n\nexport function metadata() {\n  return sp.getMetadata();\n}\n", "import { metadata } from \"~/saml.server\";\n\nexport async function loader({ params }: LoaderArgs) {\n  const meta = metadata();\n  return new Response(meta, {\n    status: 200,\n    headers: {\n      \"Content-Type\": \"text/xml\",\n    },\n  });\n}\n", "import type { ActionArgs, LoaderArgs, MetaFunction } from \"@remix-run/node\";\nimport { createUserSession } from \"~/session.server\";\nimport { sp, getIdp } from \"~/saml.server\";\nimport { redirect } from \"@remix-run/node\";\nimport { getOrCreateUser, updateUserProps } from \"~/models/user.server\";\n\nexport const action: ActionFunction = async ({ request }) => {\n  const formData = await request.formData();\n\n  if (request.method == \"POST\") {\n    const body = Object.fromEntries(formData);\n    const idp = await getIdp();\n    const { samlContent, extract } = await sp.parseLoginResponse(idp, \"post\", {\n      body: body,\n    });\n    if (extract.nameID) {\n      const next = body.RelayState ? body.RelayState : \"/\";\n      const email = extract.nameID;\n\n      const expiration = extract.conditions?.notOnOrAfter;\n\n      // get or create user\n      // let user = await getOrCreateUser(email);\n\n      // update user info\n      let user = await updateUserProps(\n        email,\n        extract.attributes?.firstName,\n        extract.attributes?.lastName,\n        extract.attributes?.groups\n      );\n\n      // create a session\n      return createUserSession({\n        request: request,\n        userId: user.id,\n        expiration: expiration,\n        redirectTo: next,\n      });\n    }\n\n    // return to next url\n    return redirect(\"/access_denied\");\n  } else {\n    return redirect(\"/\");\n  }\n};\n\nexport async function loader({ request }: LoaderArgs) {\n  // get request... send back to home page, we are here by accident.\n  return redirect(\"/\");\n}\n", "import type { ActionArgs, LoaderArgs, MetaFunction } from \"@remix-run/node\";\nimport { logout } from \"~/session.server\";\nimport { redirect } from \"@remix-run/node\";\n\n/* can't do idp initiated logout w/ cookie sessions, but can still use\n   this point to logout if we wanna\n*/\nexport const action: ActionFunction = async ({ request }) => {\n  return await logout(request);\n};\n", "import type { ActionArgs } from \"@remix-run/node\";\nimport { redirect } from \"@remix-run/node\";\n\nimport { logout } from \"~/session.server\";\n\nexport async function action({ request }: ActionArgs) {\n  return logout(request);\n}\n\nexport async function loader({ request }: LoaderArgs) {\n  return logout(request);\n}\n", "import { Link } from \"@remix-run/react\";\nimport { useLoaderData } from \"@remix-run/react\";\nimport { authorize } from \"~/session.server\";\nimport type { LoaderArgs } from \"@remix-run/server-runtime\";\n\n// import greetingsQueue from \"~/queues/greetings.server\";\n\nexport async function loader({ request }: LoaderArgs) {\n  return authorize(request, undefined, async ({ user, session }) => {\n    // here we can get the data for this route and return it\n\n    return user;\n  });\n}\n\nexport default function Index() {\n  const user = useLoaderData();\n  return (\n    <div> hi {user.email}</div>\n  );\n}\n", "import type { ActionArgs } from \"@remix-run/node\";\nimport { redirect } from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport { Link, useSearchParams } from \"@remix-run/react\";\nimport * as React from \"react\";\nimport type { LoaderArgs } from \"@remix-run/server-runtime\";\n\nimport { verifyLogin } from \"~/ldap.server\";\nimport {\n  getSession,\n  sessionStorage,\n  getUserId,\n  createUserSession,\n} from \"~/session.server\";\nimport { useLoaderData } from \"@remix-run/react\";\n\nimport { Form, useActionData } from \"@remix-run/react\";\nimport { safeRedirect, validateEmail } from \"~/utils\";\n\nexport async function loader({ request }: LoaderArgs) {\n  const userId = await getUserId(request);\n  if (userId) return redirect(\"/\");\n\n  const session = await getSession(request);\n  const loginError = session.get(\"loginError\") || null;\n\n  return json(\n    { loginError },\n    {\n      headers: {\n        // only necessary with cookieSessionStorage\n        \"Set-Cookie\": await sessionStorage.commitSession(session),\n      },\n    }\n  );\n}\n\nexport async function action({ request }: ActionArgs) {\n  const formData = await request.formData();\n  const email = formData.get(\"email\");\n  const password = formData.get(\"password\");\n  const redirectTo = safeRedirect(formData.get(\"redirectTo\"), \"/\");\n\n  let errors = {};\n\n  if (!validateEmail(email)) {\n    errors.email = \"Email is invalid\";\n  }\n  if (typeof password !== \"string\" || password.length === 0) {\n    errors.password = \"Password is required\";\n  }\n\n  if (Object.keys(errors).length) {\n    return json({ errors: errors }, { status: 400 });\n  }\n  const user = await verifyLogin(email, password);\n\n  if (!user) {\n    return json(\n      { errors: { email: \"Invalid email or password\", password: null } },\n      { status: 400 }\n    );\n  }\n\n  return createUserSession({\n    request: request,\n    userId: user.id,\n    expiration: undefined,\n    redirectTo,\n  });\n}\n\nexport const meta: MetaFunction = () => {\n  return {\n    title: \"Login\",\n  };\n};\n\nexport default function Login() {\n  const [searchParams] = useSearchParams();\n  const redirectTo = searchParams.get(\"redirectTo\") || \"/notes\";\n\n  const { loginError } = useLoaderData();\n\n  const actionData = useActionData<typeof action>();\n\n  const emailRef = React.useRef<HTMLInputElement>(null);\n  const passwordRef = React.useRef<HTMLInputElement>(null);\n\n  React.useEffect(() => {\n    if (actionData?.errors?.email) {\n      emailRef.current?.focus();\n    } else if (actionData?.errors?.password) {\n      passwordRef.current?.focus();\n    }\n  }, [actionData]);\n\n  return (\n    <div className=\"hero \">\n      <div className=\"hero-body\">\n        <div className=\"columns is-centered mt-5\">\n          <div className=\"column is-4 mt-5 box\">\n            <Form method=\"post\" className=\"form\">\n              <h1 className=\"title is-1\">Login</h1>\n              {loginError ? (\n                <article className=\"message is-danger \">\n                  <div className=\"message-body p-2 is-flex\">\n                    \n                    <span>{loginError}</span>\n                  </div>\n                </article>\n              ) : null}\n              <div className=\"field\">\n                <label className=\"label\">Email</label>\n                <div className=\"control has-icons-left\">\n                  <input\n                    ref={emailRef}\n                    className=\"input\"\n                    name=\"email\"\n                    autoComplete=\"off\"\n                  />\n                 \n                </div>\n                {actionData?.errors?.email && (\n                  <p className=\"help is-danger\">{actionData.errors.email}</p>\n                )}\n              </div>\n              <div className=\"field\">\n                <label className=\"label\">Password</label>\n                <div className=\"control has-icons-left\">\n                  <input\n                    ref={passwordRef}\n                    className=\"input\"\n                    type=\"password\"\n                    name=\"password\"\n                  />\n                  \n                </div>\n                {actionData?.errors?.password && (\n                  <p className=\"help is-danger\">{actionData.errors.password}</p>\n                )}\n              </div>\n              <button\n                className=\"button is-info is-fullwidth\"\n                type=\"submit\"\n                value=\"Submit\"\n              >\n                Log In\n              </button>\n            </Form>\n            \n            <Link className=\"button is-fullwidth\" to=\"/\">\n              Login with SAML\n            </Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n", "import type { Password, User } from \"@prisma/client\";\n\nimport { prisma } from \"~/db.server\";\n\nexport type { User } from \"@prisma/client\";\nimport { authenticate } from \"ldap-authentication\";\nimport { getOrCreateUser, updateUserProps } from \"~/models/user.server\";\n\nexport async function verifyLogin(email: User[\"email\"], password: string) {\n  // first login with ldap\n\n  let options = {\n    ldapOpts: {\n      url: process.env.LDAP_HOST, //'ldap://ldap.forumsys.com',\n      // tlsOptions: { rejectUnauthorized: false }\n    },\n    adminDn: process.env.LDAP_USERNAME,\n    adminPassword: process.env.LDAP_PASSWORD,\n    userPassword: password,\n    userSearchBase: process.env.LDAP_BASE_DN,\n    usernameAttribute: process.env.LDAP_EMAIL_FIELD,\n    username: email,\n    groupsSearchBase: process.env.LDAP_BASE_DN,\n    groupClass: process.env.LDAP_GROUP_CLASS,\n    // groupMemberAttribute: process.env.LDAP_GROUP_NAME,\n    // starttls: process.env.LDAP_START_TLS,\n  };\n\n  let ldapUser = await authenticate(options);\n  if (!ldapUser) {\n    return null;\n  }\n\n  // create user\n  // await getOrCreateUser(email);\n\n  // update user info\n  return await updateUserProps(\n    email,\n    ldapUser[process.env.LDAP_FIRSTNAME],\n    ldapUser[process.env.LDAP_LASTNAME],\n    ldapUser.groups?.map((g) => g.cn)\n  );\n}\n", "import { useMatches } from \"@remix-run/react\";\nimport { useMemo } from \"react\";\n\nimport type { User } from \"~/models/user.server\";\n\nconst DEFAULT_REDIRECT = \"/\";\n\n/**\n * This should be used any time the redirect path is user-provided\n * (Like the query string on our login/signup pages). This avoids\n * open-redirect vulnerabilities.\n * @param {string} to The redirect destination\n * @param {string} defaultRedirect The redirect to use if the to is unsafe.\n */\nexport function safeRedirect(\n  to: FormDataEntryValue | string | null | undefined,\n  defaultRedirect: string = DEFAULT_REDIRECT\n) {\n  if (!to || typeof to !== \"string\") {\n    return defaultRedirect;\n  }\n\n  if (!to.startsWith(\"/\") || to.startsWith(\"//\")) {\n    return defaultRedirect;\n  }\n\n  return to;\n}\n\nexport function validateEmail(email: unknown): email is string {\n  return typeof email === \"string\" && email.length > 3 && email.includes(\"@\");\n}\n", "export default {'version':'3ee52181','entry':{'module':'/build/entry.client-SID2VKEO.js','imports':['/build/_shared/chunk-AOIOWGX7.js','/build/_shared/chunk-5KL4PAQL.js']},'routes':{'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'module':'/build/root-52DNXQET.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/auth/asc':{'id':'routes/auth/asc','parentId':'root','path':'auth/asc','index':undefined,'caseSensitive':undefined,'module':'/build/routes/auth/asc-RRLHIXMO.js','imports':undefined,'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/auth/slo':{'id':'routes/auth/slo','parentId':'root','path':'auth/slo','index':undefined,'caseSensitive':undefined,'module':'/build/routes/auth/slo-P44HXIXC.js','imports':undefined,'hasAction':true,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/index':{'id':'routes/index','parentId':'root','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/index-FAPGUQTA.js','imports':['/build/_shared/chunk-GLWAIFE6.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/login':{'id':'routes/login','parentId':'root','path':'login','index':undefined,'caseSensitive':undefined,'module':'/build/routes/login-XX7T4U4V.js','imports':['/build/_shared/chunk-GLWAIFE6.js'],'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/logout':{'id':'routes/logout','parentId':'root','path':'logout','index':undefined,'caseSensitive':undefined,'module':'/build/routes/logout-DOMDNNGV.js','imports':undefined,'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/metadata[.].xml':{'id':'routes/metadata[.].xml','parentId':'root','path':'metadata./xml','index':undefined,'caseSensitive':undefined,'module':'/build/routes/metadata[.].xml-MN5B3I47.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false}},'cssBundleHref':undefined,'url':'/build/manifest-3EE52181.js'};", "\nimport * as entryServer from \"./entry.server.tsx\";\nimport * as route0 from \"./root.tsx\";\nimport * as route1 from \"./routes/metadata[.].xml.tsx\";\nimport * as route2 from \"./routes/auth/asc.tsx\";\nimport * as route3 from \"./routes/auth/slo.tsx\";\nimport * as route4 from \"./routes/logout.tsx\";\nimport * as route5 from \"./routes/index.tsx\";\nimport * as route6 from \"./routes/login.tsx\";\n  export { default as assets } from \"@remix-run/dev/assets-manifest\";\n  export const assetsBuildDirectory = \"public/build\";\n  export const future = {\"unstable_cssModules\":false,\"unstable_cssSideEffectImports\":false,\"unstable_vanillaExtract\":false,\"v2_errorBoundary\":false,\"v2_meta\":false,\"v2_routeConvention\":false};\n  export const publicPath = \"/build/\";\n  export const entry = { module: entryServer };\n  export const routes = {\n    \"root\": {\n      id: \"root\",\n      parentId: undefined,\n      path: \"\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route0\n    },\n  \"routes/metadata[.].xml\": {\n      id: \"routes/metadata[.].xml\",\n      parentId: \"root\",\n      path: \"metadata./xml\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route1\n    },\n  \"routes/auth/asc\": {\n      id: \"routes/auth/asc\",\n      parentId: \"root\",\n      path: \"auth/asc\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route2\n    },\n  \"routes/auth/slo\": {\n      id: \"routes/auth/slo\",\n      parentId: \"root\",\n      path: \"auth/slo\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route3\n    },\n  \"routes/logout\": {\n      id: \"routes/logout\",\n      parentId: \"root\",\n      path: \"logout\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route4\n    },\n  \"routes/index\": {\n      id: \"routes/index\",\n      parentId: \"root\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route5\n    },\n  \"routes/login\": {\n      id: \"routes/login\",\n      parentId: \"root\",\n      path: \"login\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route6\n    }\n  };"],
  "mappings": "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",
  "names": ["isbot", "import_react", "import_node", "import_node", "import_tiny_invariant", "invariant", "fs", "invariant", "import_react", "import_jsx_dev_runtime", "loader", "loader", "meta", "loader", "import_node", "loader", "action", "action", "action", "loader", "action", "loader", "loader", "import_react", "import_jsx_dev_runtime", "loader", "action", "loader", "meta", "import_node", "import_react", "import_react", "import_jsx_dev_runtime", "loader", "action", "meta", "_a", "_b"]
}
